#!/usr/bin/env ruby
# @author Matthieu Gourv√©nec <matthieu.gourvenec@gmail.com>

require_relative '../lib/fgi'

argv = ARGV

# ----------------------------- #
#          FGI CMD DOC          #
# ----------------------------- #

options = {}
options_parser = OptionParser.new do |fgi|
  fgi.banner = 'Usage: fgi COMMAND [OPTION]'
  fgi.separator ''
  fgi.separator 'Commands'
  fgi.separator '    config              : run the FGI configurator.'
  fgi.separator '    token  [TOKEN]      : define the new user token.'
  fgi.separator '    new    [ISSUE_NAME] : create the issue with the given name.'
  fgi.separator '    fix                 : fix the current issue.'
  fgi.separator '    ... more comming soon ...'
  fgi.separator ''
  fgi.separator 'Options'

  fgi.on('-h', '--help', 'Display the FGI manual')

  fgi.on('-v', '--version', 'Display the FGI version') do
    puts "FGI #{Fgi::VERSION}"
    exit!
  end

  fgi.on('-e', '--estimate [ESTIMATION]', 'How many time do you think you will spend on this issue ? (example: 1d13h37m05s)') do |estimate|
    options[:estimate] = estimate
  end

  fgi.on('-l', '--later', 'Tell FGI that you only want to create an issue but not to create and switch branch.') do
    options[:later] = true
  end

  fgi.on('-p', '--prefix [PREFIX]', 'Tell FGI that you want to add a prefix to the branch name.') do |prefix|
    options[:prefix] = prefix
  end

  fgi.on('--from-current', 'Tell FGI to create the new issue from a specific branch.') do
    options[:from_current] = true
  end

  fgi.on('-m', '--fix-message [MESSAGE]', %q(Add a custom message with the basic 'Fix #ID')) do |message|
    options[:fix_message] = message
  end
end
options_parser.parse!

# ---------------------------- #
#          DISPATCHER          #
# ---------------------------- #

def get_full_issue_title(argv)
  return nil if argv[1].nil?
  length = argv.length
  argv[1..length].join(' ')
end

case argv[0]
when 'config'
  Fgi::Configuration.new_config
when 'new'
  Fgi.configured?
  if !argv[1].nil? && argv[1].start_with?('-')
    puts %q(You can't begin your issue's title with '-')
    exit!
  end
  title = get_full_issue_title(argv)
  Fgi::GitService.new_issue(title: title, options: options)
when 'token'
  Fgi.configured?
  Fgi::Tokens.add_token(argv[1])
when 'fix'
  Fgi::GitService.fix_issue(options)
else
  puts options_parser
end
